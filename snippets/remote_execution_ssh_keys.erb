<%#
  kind: snippet
  name: remote_execution_ssh_keys
%>
# SSH keys setup snippet for Remote Execution plugin
#
# Parameters:
#
# remote_execution_ssh_keys: public keys to be put in ~/.ssh/authorized_keys
#
# remote_execution_ssh_user: user for which remote_execution_ssh_keys will be
#                            authorized
#
# This template sets up SSH keys in any host so that as long as your public
# SSH key is in remote_execution_ssh_keys, you can SSH into a host. This only
# works in combination with Remote Execution plugin.

# The Remote Execution plugin queries smart proxies to build the
# remote_execution_ssh_keys array which is then made available to this template
# via the host's parameters. There is currently no way of supplying this
# parameter manually.
# See http://projects.theforeman.org/issues/16107 for details.

<% if !@host.params['remote_execution_ssh_keys'].blank? %>
<% ssh_user = @host.params['remote_execution_ssh_user'] || 'root' %>

user_exists=false
getent passwd <%= ssh_user %> >/dev/null 2>&1 && user_exists=true

if $user_exists; then
<% ssh_path = "~#{ssh_user}/.ssh" %>

  mkdir -p <%= ssh_path %>

  cat << EOF >> <%= ssh_path %>/authorized_keys
<%= @host.params['remote_execution_ssh_keys'].join("\n") %>
EOF

  chmod 700 <%= ssh_path %>
  chmod 600 <%= ssh_path %>/authorized_keys
  chown -R <%= "#{ssh_user}:" %> <%= ssh_path %>

  # Restore SELinux context with restorecon, if it's available:
  command -v restorecon && restorecon -RvF <%= ssh_path %> || true
else
  echo 'The remote_execution_ssh_user does not exist.  remote_execution_ssh_keys snippet will not install keys'
fi
<% end %>
